/*
	These are the breakpoints for your website. These can be customised to your design. The 
	more that I think about it, the more I'm starting to realise that these breakpoints 
	need to change for the design, and not for the sizes they are. They're just a guide. 
	In fact, I insist, you MUST change these.
*/
/* 
	This is for something special. If px-only is defined in the u() function, 
	then all rems are replaced with these breakpoints instead.
*/
/*
	This is a breakpoint map. It allows us to use a loop of the breakpoints throughout
	the site inside other loops and @each's. Mostly in _mixins.scss and _wrap.scss
*/
/* 

Rems for the future, PX for the past.

This is a function that has been created to
remove the need to write everything twice when it comes to REMs and PX.

Basically, when you use u(3rem), the px-only variable on the style, 
android and ie page tells the preprocessor to either change all 
values in the breakpoint stylesheets to be either REM or PX, 
and it'll do the math around it. So what you're left with is more hair
at the end of the day.

Source: http://davidwalsh.name/rem-px-browser-function-sass
@Useage: u(3rem); 
 
*/
/* 1 */
/* This solves an issue with 1px == 1 and 1em == 1, thus 1px == 1em */
/************************
	SQUARE ROOTS
*************************/
/*/////////////////////////////
// Exponent
/////////////////////////////*/
/*************************************
This converts columns to pixels based 
on the $content width 
*************************************/
/*********************
RESPONSIVE HELPER FUNCTION
If you're creating a responsive site, then
you've probably already read
Responsive Web Design: http://www.abookapart.com/products/responsive-web-design

Here's a nice little helper function for calculating
target / context
as mentioned in that book.

Example:
width: cp(650px, 1000px);
or
width: calc-percent(650px, 1000px);
both compile to:
width: 65%;
*********************/
/*********************
CLEARFIXIN'
*********************/
@import url(http://fonts.googleapis.com/css?family=Fira+Sans:400,300,500);
.clearfix {
  zoom: 1; }
  .clearfix:before, .clearfix:after {
    content: "";
    display: table; }
  .clearfix:after {
    clear: both; }

/*
	Grid Mixin
	----------
	
	We use these for making grids work easier.
	@include GridAssets(2, first); = Two columns, and it's the first column
*/
.relative {
  position: relative; }

.vertical {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%); }
  .vertical.horizontal {
    width: 100%;
    text-align: center;
    margin: 0 auto; }

/* 	This mixin will help you nest mediaqueries easier.
	@Usage:
		@include wider-than(mobile) 	{ width: 55%; 	}
		@include wider-than(phablet) 	{ width: 65%; 	}
		@include wider-than(tablet) 	{ width: 75%;	}

	Uses the breakpoint map defined inside _breakpoints.scss
*/
/* this is the padding */
.padding-1 {
  padding-top: 16px;
  padding-bottom: 16px;
  padding-top: 1rem;
  padding-bottom: 1rem; }
  .padding-1-top {
    padding-top: 16px;
    padding-top: 1rem; }
  .padding-1-bottom {
    padding-bottom: 16px;
    padding-bottom: 1rem; }

.padding-2 {
  padding-top: 32px;
  padding-bottom: 32px;
  padding-top: 2rem;
  padding-bottom: 2rem; }
  .padding-2-top {
    padding-top: 32px;
    padding-top: 2rem; }
  .padding-2-bottom {
    padding-bottom: 32px;
    padding-bottom: 2rem; }

.padding-3 {
  padding-top: 48px;
  padding-bottom: 48px;
  padding-top: 3rem;
  padding-bottom: 3rem; }
  .padding-3-top {
    padding-top: 48px;
    padding-top: 3rem; }
  .padding-3-bottom {
    padding-bottom: 48px;
    padding-bottom: 3rem; }

.padding-4 {
  padding-top: 64px;
  padding-bottom: 64px;
  padding-top: 4rem;
  padding-bottom: 4rem; }
  .padding-4-top {
    padding-top: 64px;
    padding-top: 4rem; }
  .padding-4-bottom {
    padding-bottom: 64px;
    padding-bottom: 4rem; }

.no-margin-top {
  margin-top: 0; }

.no-margin-bottom {
  margin-bottom: 0; }

.no-margin-left {
  margin-left: 0; }

.no-margin-right {
  margin-right: 0; }

/*********************
C O N T E N T   C H O R E O G R A P H Y
Something that will reorder your content if used correctly.
And on the right browser, of course.
**********************/
/*********************
Placeholder Mixin
Simply use this in a class somewhere to add placeholder styles.
	@include placeholder {
		colour: $brand-colour;
	}
*********************/
/* Font Smoothing - http://maximilianhoffmann.com/posts/better-font-rendering-on-osx */
/* 
	Blend Modes
	===========
	http://caniuse.com/#feat=css-backgroundblendmode
	@usage:  
		@include blended("url", $colour);
		@include blended("url", $grad: $love);

*/
/*********************
TOOLS
*********************/
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

.image-replacement {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden; }

.screen-reader-text {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute; }

/************************
 I N L I N E - B L O C K
~ Gap Removal Technique ~

@usage: @include ib();
************************/
/* This is quite an experiment with font sizes. 
 Basically, i'm using a modualr scale for the type. */
/* 
	Counting Elements can be fun.
	http://www.sitepoint.com/using-sass-quantity-queries/

	// If there are exactly 5 elements:
	@include count-is(5){
		// Say something beautiful
	}
	
	// If there are less than 3 elements:
	@include count-is-less-than(3){
		// Say something beautiful
	}

	// If there are 3 or more elements:
	@include count-is-more-than(3){
		// Say something beautiful
	}

*/
/*********************
TRANSITION
*********************/
/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/
/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/
/* @include css-gradient(#dfdfdf,#f8f8f8); */
/*********************
BOX SIZING
*********************/
/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
/*********************
Background colour based on brightness
*********************/
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*
	Wrapping the entire site
	------------------------
	We use a .wrap class on areas that we want
	to restrict the width of. So this loop
	goes through our breakpoints located in
	_breakpoints.scss
*/
.wrap {
  width: 92%;
  margin: 0 auto;
  /* For each breakpoint listed here, make a mediaquiery and a max-width of that breakpoint. */ }
  @media (min-width: 19rem) {
    .wrap {
      width: 96%; } }
  @media (min-width: 19rem) {
    .wrap {
      max-width: 19rem; } }
  @media (min-width: 22.5rem) {
    .wrap {
      max-width: 22.5rem; } }
  @media (min-width: 27rem) {
    .wrap {
      max-width: 27rem; } }
  @media (min-width: 30rem) {
    .wrap {
      max-width: 30rem; } }
  @media (min-width: 35rem) {
    .wrap {
      max-width: 35rem; } }
  @media (min-width: 43rem) {
    .wrap {
      max-width: 43rem; } }

/* Hide and Show depending if it's on mobile or not */
.mobile-only {
  display: block; }
  @media (min-width: 22.5rem) {
    .mobile-only {
      display: none; } }

.above-mobile {
  display: none; }
  @media (min-width: 22.5rem) {
    .above-mobile {
      display: block; } }

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  font-weight: 300;
  margin: 0; }

h1, .h1 {
  font-size: 1.7359005486rem;
  font-size: 36px;
  line-height: 1.5;
  padding-top: 0.41em;
  margin-bottom: 1.09em; }
  @media (min-width: 27rem) {
    h1, .h1 {
      font-size: 1.7359005486rem; } }
  @media (min-width: 30rem) {
    h1, .h1 {
      font-size: 1.8522058854rem; } }
  @media (min-width: 35rem) {
    h1, .h1 {
      font-size: 1.9763036797rem; } }
  @media (min-width: 43rem) {
    h1, .h1 {
      font-size: 2.1087160262rem; } }
  @media (min-width: 48rem) {
    h1, .h1 {
      font-size: 2.25rem; } }

h2, .h2 {
  font-size: 1.4948032502rem;
  font-size: 31px;
  line-height: 1.5;
  padding-top: 0.41em;
  margin-bottom: 1.09em; }
  @media (min-width: 27rem) {
    h2, .h2 {
      font-size: 1.4948032502rem; } }
  @media (min-width: 30rem) {
    h2, .h2 {
      font-size: 1.594955068rem; } }
  @media (min-width: 35rem) {
    h2, .h2 {
      font-size: 1.7018170575rem; } }
  @media (min-width: 43rem) {
    h2, .h2 {
      font-size: 1.8158388004rem; } }
  @media (min-width: 48rem) {
    h2, .h2 {
      font-size: 1.9375rem; } }

h3, .h3 {
  font-size: 1.1572670324rem;
  font-size: 24px;
  line-height: 1.5;
  padding-top: 0.41em;
  margin-bottom: 1.09em; }
  @media (min-width: 27rem) {
    h3, .h3 {
      font-size: 1.1572670324rem; } }
  @media (min-width: 30rem) {
    h3, .h3 {
      font-size: 1.2348039236rem; } }
  @media (min-width: 35rem) {
    h3, .h3 {
      font-size: 1.3175357865rem; } }
  @media (min-width: 43rem) {
    h3, .h3 {
      font-size: 1.4058106842rem; } }
  @media (min-width: 48rem) {
    h3, .h3 {
      font-size: 1.5rem; } }

h4, .h4 {
  font-size: 0.9643891937rem; }
  @media (min-width: 27rem) {
    h4, .h4 {
      font-size: 0.9643891937rem; } }
  @media (min-width: 30rem) {
    h4, .h4 {
      font-size: 1.0290032697rem; } }
  @media (min-width: 35rem) {
    h4, .h4 {
      font-size: 1.0979464887rem; } }
  @media (min-width: 43rem) {
    h4, .h4 {
      font-size: 1.1715089035rem; } }
  @media (min-width: 48rem) {
    h4, .h4 {
      font-size: 1.25rem; } }

h5, .h5, h6, .h6 {
  font-size: 0.8486624904rem; }
  @media (min-width: 27rem) {
    h5, .h5, h6, .h6 {
      font-size: 0.8486624904rem; } }
  @media (min-width: 30rem) {
    h5, .h5, h6, .h6 {
      font-size: 0.9055228773rem; } }
  @media (min-width: 35rem) {
    h5, .h5, h6, .h6 {
      font-size: 0.9661929101rem; } }
  @media (min-width: 43rem) {
    h5, .h5, h6, .h6 {
      font-size: 1.0309278351rem; } }
  @media (min-width: 48rem) {
    h5, .h5, h6, .h6 {
      font-size: 1.1rem; } }

/*********************************
	Text alignment in classes	
*********************************/
.text-left {
  text-align: left; }

.text-center {
  text-align: center; }

.text-right {
  text-align: right; }

.marginauto {
  margin: 0 auto !important;
  float: none !important; }

/*
	# Typekit and FOUT.

	FOUT means "Flash of Unstyled Text"
	and that happens when the site loads before the 
	javascript can get the fonts needed for the 
	page to be styled.
	
	Typekit have suggested "how about you hide 
	everything until they load?" and have provided 
	a javascript way of getting the fonts to load. 
	
	Which might work, but if the javascript doesn't 
	load, we're still going to have a flash of 
	text right?

  wf-loading wf-active
*/
html {
  transition: -webkit-filter 0.24s ease-out, -moz-filter 0.24s ease-out, -ms-filter 0.24s ease-out, -o-filter 0.24s ease-out, filter 0.24s ease-out; }
  html.wf-loading {
    filter: blur(10px); }
  html.wf-active {
    filter: blur(0); }

/*
	Selections
	----------
*/
h1 ::-moz-selection, h2 ::-moz-selection, h3 ::-moz-selection, h4 ::-moz-selection, h5 ::-moz-selection, h6 ::-moz-selection, p ::-moz-selection, li ::-moz-selection, ul ::-moz-selection, span ::-moz-selection, div ::-moz-selection {
  background-color: #fff;
  color: #9edff4; }
h1 ::selection, h2 ::selection, h3 ::selection, h4 ::selection, h5 ::selection, h6 ::selection, p ::selection, li ::selection, ul ::selection, span ::selection, div ::selection {
  background-color: #fff;
  color: #9edff4; }

a ::-moz-selection, img ::-moz-selection, blockquote ::-moz-selection {
  background-color: #9edff4;
  color: #fff; }
a ::selection, img ::selection, blockquote ::selection {
  background-color: #9edff4;
  color: #fff; }

/*
	Hyphenation + Selections
	-----------------------
*/
p {
  -ms-word-break: normal;
  -ms-word-wrap: normal;
  word-break: normal;
  word-break: normal;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  hyphens: none;
  -webkit-hyphenate-before: 2;
  -webkit-hyphenate-after: 3;
  hyphenate-lines: 3;
  -webkit-font-feature-settings: "liga", "dlig";
  -moz-font-feature-settings: "liga=1, dlig=1";
  -ms-font-feature-settings: "liga", "dlig";
  -o-font-feature-settings: "liga", "dlig";
  font-feature-settings: "liga", "dlig"; }

html {
  font-size: 16px; }

body {
  font-family: "Fira Sans", sans-serif;
  color: #444;
  font-size: 100%;
  line-height: 1.4;
  font-weight: 200;
  background-color: white; }

a {
  color: #120f17;
  text-decoration: underline; }
  a:hover {
    color: #2e273d; }
  a:active {
    color: #120f17; }
  a:focus {
    outline: 0; }

img {
  max-width: 100%;
  height: auto;
  vertical-align: bottom; }

p {
  font-size: 16px;
  line-height: 1.5;
  padding-top: 0.41em;
  margin-bottom: 1.09em; }

/* Settings */
.slide {
  position: relative;
  float: left;
  width: 100%; }

input[type="radio"] {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute; }

label {
  background-color: #9edff4;
  color: #fff;
  padding: 1rem;
  display: inline-block;
  width: 20%;
  vertical-align: top;
  float: left;
  clear: left; }

.content {
  position: absolute; }

.content {
  display: none;
  padding: 1rem;
  width: 80%;
  vertical-align: top;
  height: 100%;
  clear: both;
  top: 0;
  right: 0;
  bottom: auto;
  left: auto; }
  .content div {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    padding: 1rem;
    background-blend-mode: soft-light;
    background-color: #9edff4; }

#tab-1:checked + label {
  background-color: #95dcf3; }
#tab-1:checked ~ #content-1 {
  display: block;
  background-color: #70d0ef; }

#tab-2:checked + label {
  background-color: #8cd9f2; }
#tab-2:checked ~ #content-2 {
  display: block;
  background-color: #42c1ea; }

#tab-3:checked + label {
  background-color: #83d6f1; }
#tab-3:checked ~ #content-3 {
  display: block;
  background-color: #19afe0; }

#tab-4:checked + label {
  background-color: #79d3f0; }
#tab-4:checked ~ #content-4 {
  display: block;
  background-color: #148bb2; }

#tab-5:checked + label {
  background-color: #70d0ef; }
#tab-5:checked ~ #content-5 {
  display: block;
  background-color: #0f6784; }

#tab-6:checked + label {
  background-color: #67cdee; }
#tab-6:checked ~ #content-6 {
  display: block;
  background-color: #0a4456; }

#tab-7:checked + label {
  background-color: #5ecaed; }
#tab-7:checked ~ #content-7 {
  display: block;
  background-color: #052028; }

#tab-8:checked + label {
  background-color: #55c7ec; }
#tab-8:checked ~ #content-8 {
  display: block;
  background-color: black; }

#tab-9:checked + label {
  background-color: #4cc4eb; }
#tab-9:checked ~ #content-9 {
  display: block;
  background-color: black; }

#tab-10:checked + label {
  background-color: #42c1ea; }
#tab-10:checked ~ #content-10 {
  display: block;
  background-color: black; }

div {
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000; }

div {
  transition: top 0.24s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.45s cubic-bezier(0.86, 0, 0.07, 1), transform 0.45s cubic-bezier(0.86, 0, 0.07, 1); }
  div.is-not-visible {
    opacity: 0;
    transform: translate(-20px, 0); }
  div.is-visible {
    opacity: 1;
    transform: translate(0, 0); }
    div.is-visible:nth-of-type(2) {
      transition-delay: 0.1s; }
    div.is-visible:nth-of-type(3) {
      transition-delay: 0.2s; }
    div.is-visible:nth-of-type(4) {
      transition-delay: 0.3s; }
    div.is-visible:nth-of-type(5) {
      transition-delay: 0.4s; }
    div.is-visible:nth-of-type(6) {
      transition-delay: 0.5s; }
    div.is-visible:nth-of-type(1) {
      transition-delay: 0.1 s; }
    div.is-visible:nth-of-type(2) {
      transition-delay: 0.2 s; }
    div.is-visible:nth-of-type(3) {
      transition-delay: 0.3 s; }
    div.is-visible:nth-of-type(4) {
      transition-delay: 0.4 s; }
    div.is-visible:nth-of-type(5) {
      transition-delay: 0.5 s; }
    div.is-visible:nth-of-type(6) {
      transition-delay: 0.6 s; }
    div.is-visible:nth-of-type(7) {
      transition-delay: 0.7 s; }
    div.is-visible:nth-of-type(8) {
      transition-delay: 0.8 s; }
    div.is-visible:nth-of-type(9) {
      transition-delay: 0.9 s; }
    div.is-visible:nth-of-type(10) {
      transition-delay: 1 s; }
    div.is-visible:nth-of-type(11) {
      transition-delay: 1.1 s; }
    div.is-visible:nth-of-type(12) {
      transition-delay: 1.2 s; }
    div.is-visible:nth-of-type(13) {
      transition-delay: 1.3 s; }
    div.is-visible:nth-of-type(14) {
      transition-delay: 1.4 s; }
    div.is-visible:nth-of-type(15) {
      transition-delay: 1.5 s; }
    div.is-visible:nth-of-type(16) {
      transition-delay: 1.6 s; }
    div.is-visible:nth-of-type(17) {
      transition-delay: 1.7 s; }
    div.is-visible:nth-of-type(18) {
      transition-delay: 1.8 s; }
    div.is-visible:nth-of-type(19) {
      transition-delay: 1.9 s; }
    div.is-visible:nth-of-type(20) {
      transition-delay: 2 s; }
